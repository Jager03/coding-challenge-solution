= eXXcellent programming challenge

This repository provides the code for the solution to the eXXcellent programming challenge. For the solution
two new folders were added to the scaffold (classes and interfaces)

= Structure

Interfaces::
This folder contains the two created interfaces used to solve the challenge:

1. **Reader**: this interface defines the method that any reader class should implement in order to be used for solving the tasks

2. **Processor**: this interface defines the method `solveTask()` that a Processor class should implement. This interface is
templated, as the `solveTask()` method returns a different type and accepts a list of different types as parameter according to which task the class is
going to complete. This way a class can be implemented for each task, helping in separating concerns.

classes::
This folder contains the implementations of the classes needed for the solution. In total 5 new classes were created:

1. **Weather**: this class is responsible for encapsulating all the information for a day in the csv and the method `getTemperatureSpread()`

2. **FootballTeam**: similarly, this class is responsible for encapsulating all the information for of the football teams in the csv and the method `getGoalDifference()`

3. **DataReaderCSV**: this class implements the Reader interface, along with its two defined methods `readWeatherData(String filePath)`
and `readFootballData(String filePath)`. This class is responsible for reading the csv given in the filePath and returning a list
containing all the created objects

4. **WeatherTaskProcessor**: this class implements the Processor interface using the types `Weather` and `Integer` for the template.
In the method solveTask() it calculates the day with the smallest temperature spread.

5. **FootballTaskProcessor**: similarly to the WeatherTaskProcessor class, this one implements the Processor interface, but this time
it uses `FootballTeam` and `String` as the types for the template


Main::
The main method initializes the three components needed for the solution, then checks the parameters before executing the logic dynamically based on the provided parameters.

AppTest::
New test were implemented to check following functionalities:
1. runWeather() to run the application using weather command
2. runUnknownCommand() to run the application using not registered command
3 runUnknownFileName() to check error handling when running the app with a unknown file
4. runWithInsufficientArguments() to test parameter checking


